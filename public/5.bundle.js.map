{"version":3,"file":"5.bundle.js","sources":["webpack:///./src/components/ModalSubComponents/ModalContent.js","webpack:///./src/components/ModalSubComponents/LeftColumn.js","webpack:///./src/components/ModalSubComponents/RightColumn.js","webpack:///./src/components/ModalSubComponents/TextBox.js"],"sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport LeftColumn from './LeftColumn';\nimport RightColumn from './RightColumn';\nimport TextBox from './TextBox';\nimport { showCategories, showInstruments, showKeywords, showRatings,} from '../../actions/modalActions';\nimport { showStyles, showTempos, showTextBox, save, updateData } from '../../actions/modalActions';\nimport { selectInstruments } from '../../actions/BackgroundInstrumentalsActions/instrumentsBIActions';\nimport { selectKeywords } from '../../actions/BackgroundInstrumentalsActions/keywordsActions';\nimport { selectTempos } from '../../actions/BackgroundInstrumentalsActions/temposActions';\nimport { updateCues } from '../../actions/BackgroundInstrumentalsActions/cuesActions';\n\nclass ModalContent extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  copyFromV1 = () => {\n    let modal = this.props.modal;\n    let selectedCue = this.props.modal.selectedCue;\n    let allCues = this.props.cues;\n    let allMasters = this.props.BImasterIDs;\n    // our regex expression checks to see if 'v#' exists in the title of the track\n    let regex = /v\\d{1,2}/g;\n    if(regex.test(selectedCue.cue_title)){\n      // if there are multiple versions of the track\n      // find all of the versions of that track\n      allMasters.filter(x =>\n        x.cue_id === selectedCue.cue_id\n      ).map(y => {\n        // in the cues array, find the corresponding master id\n        allCues.filter(cue =>\n          cue.cue_id === y.master_cue_id\n        ).map(masterTrack => {\n          // using object destructuring, set the metadata of the current (v>1) updated cue\n          // to the master track (v1) metadata of that cue, overriding (or rather keeping)\n          // it's unique identifying values (name, id, duration)\n          let updatedCue = {\n              ...masterTrack,\n              cue_id: selectedCue.cue_id,\n              cue_title: selectedCue.cue_title,\n              cue_duration: selectedCue.cue_duration,\n              cue_duration_sec: selectedCue.cue_duration_sec,\n              cue_status: selectedCue.cue_status\n          }\n          this.props.updateData(this.props.modal, updatedCue)\n          this.props.updateCues(updatedCue, this.props.cues)\n        })\n      }\n      )\n    }\n  }\n\n  // **********************************************************************************************************\n  // RENDER JSX\n  // **********************************************************************************************************\n\n  render() {\n    // console.log(59, this.props)\n    let modal = this.props.modal;\n    let selectedCue = this.props.modal.selectedCue;\n    // regex checks to see if v# appears anywhere in the track title\n    let regex = /v\\d{1,2}/g ;\n\n    let copyV1Button = regex.test(selectedCue.cue_title)\n      ?   <button onClick={this.copyFromV1}>Copy From V1</button>\n      : null;\n\n    return (\n    <div>\n      {copyV1Button}\n      <button className='save-button' onClick={() => {this.props.handleSave()}}>\n        Save\n      </button>\n      <div className='title' id={modal.selectedCueId}>\n        <strong>You Are Editing Metadata For The Cue: </strong>\n        <br/>{modal.selectedCue.cue_title}\n      </div>\n      <div className='column-wrapper'>\n        <LeftColumn/>\n        <RightColumn/>\n      </div>\n    </div>)\n      }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cues: state.cues,\n    BImasterIDs: state.BImasterIDs,\n    modal: state.modal,\n    selectedLibrary: state.selectedLibrary\n  }\n}\n\nconst mapDispatchToProps = {\n  save,\n  updateCues,\n  updateData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalContent);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport { showCategories, showInstruments, showKeywords, showRatings,} from '../../actions/modalActions';\nimport { showStyles, showTempos, showTextBox, updateData } from '../../actions/modalActions';\n\n// this is a stateless functional component\nclass LeftColumn extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  // **********************************************************************************************************\n  // CATEGORIES FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowCategories = () => {\n    this.props.showCategories(this.props.modal);\n  }\n\n  // **********************************************************************************************************\n  // STYLES FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowStyles = () => {\n    this.props.showStyles(this.props.modal);\n    if(document.getElementById('search-filter')){\n      document.getElementById('search-filter').value = '';\n    }\n  }\n\n  // **********************************************************************************************************\n  // INSTRUMENTS FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowInstruments = () => {\n    this.props.showInstruments(this.props.modal);\n    if(document.getElementById('search-filter')){\n      document.getElementById('search-filter').value = '';\n    }\n  }\n\n  // **********************************************************************************************************\n  // KEYWORDS FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowKeywords = () => {\n    this.props.showKeywords(this.props.modal);\n    if(document.getElementById('search-filter')){\n      document.getElementById('search-filter').value = '';\n    }\n  }\n\n  // **********************************************************************************************************\n  // TEMPOS FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowTempos = () => {\n    this.props.showTempos(this.props.modal);\n  }\n\n  // **********************************************************************************************************\n  // RATINGS FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowRating = () => {\n    this.props.showRatings(this.props.modal);\n  }\n\n  // **********************************************************************************************************\n  // TEXTBOX FUNCTIONS\n  // **********************************************************************************************************\n\n  handleShowTextBox = () => {\n    this.props.showTextBox(this.props.modal, event.target.getAttribute('texttype'))\n  }\n\n  render(){\n    let modal = this.props.modal;\n\n    return(\n      <div className='modal-left-column'>\n        <br/>\n        <br/><strong>Cue ID:</strong> {\n          modal.selectedCue\n            ? modal.selectedCue.cue_id\n            : null\n        }\n        <br/><strong>Duration:</strong> {modal.selectedCue.cue_duration}\n        <br/><strong>Catalog Name:</strong> Background Instrumentals\n        <div><strong>Status:</strong> {\n          modal.selectedCue\n            ? modal.selectedCue.cue_status\n            : null\n        }\n        </div>\n        <div className='select' onClick={this.handleShowCategories}><strong>Category:</strong> {\n          this.props.categories\n            ? this.props.categories.filter(category => category.cat_id === modal.selectedCue.cat_id).map(obj => obj.cat_name)\n            : null\n        }\n        </div>\n        <div className='select' onClick={this.handleShowStyles}>\n          <strong>Style: </strong> {\n              this.props.styles\n                ? this.props.styles.filter(style => style.style_id === modal.selectedCue.style_id).map(obj => obj.style_name)\n                : null\n          }\n        </div>\n        <strong>Composer(s): </strong> {\n            modal.selectedComposer.length === 1\n              ? modal.selectedComposer.map((composer, i) => `${composer.composer_name} (${composer.pro_name}) ${composer.composer_split}%`)\n              : modal.selectedComposer.map((composer, i) => `${composer.composer_name} (${composer.pro_name}) ${composer.composer_split}%  ${String.fromCodePoint(183)} `)\n        }\n\n        <br/><strong>Publisher(s): </strong> {\n            modal.selectedComposer.length === 1\n              ? modal.selectedComposer.map((composer, i) => `${composer.publisher_name} 100%`)\n              : modal.selectedComposer.map((composer, i) => `${composer.publisher_name} ${ 100 / (modal.selectedComposer.length)}% ${String.fromCodePoint(183)}  `)\n        }\n        <br/>\n        <div className='select' onClick={this.handleShowInstruments}>\n          {/* <strong>Instruments: </strong> {modal.selectedCue.cue_instrus_edit} */}\n          <strong>Instruments: </strong> {modal.selectedCue.cue_instrus}\n        </div>\n        <div className='select' onClick={this.handleShowKeywords}>\n          <strong>Keywords: </strong> {modal.selectedCue.cue_desc}\n        </div>\n        <br/>\n        <div className='select' onClick={this.handleShowTempos}>\n          <strong>Tempo: </strong> {this.props.tempos.filter(tempo => tempo.tempo_id === modal.selectedCue.tempo_id).map(obj => obj.tempo_name)}\n        </div>\n        <div className='select' onClick={this.handleShowRating}>\n          <strong>Rating: </strong> {modal.selectedCue.cue_rating}\n        </div>\n        <div className='select' onClick={this.handleShowTextBox} texttype='sounds_like_band_edit'>\n          <strong texttype='sounds_like_band_edit'>Sounds Like Band: </strong> {modal.selectedCue.sounds_like_band_edit}\n        </div>\n        <div className='select' onClick={this.handleShowTextBox} texttype='sounds_like_film_edit'>\n          <strong texttype='sounds_like_film_edit'>Sounds Like Film/TV: </strong> {modal.selectedCue.sounds_like_film_edit}\n        </div>\n        <div className='select' onClick={this.handleShowTextBox} texttype='sounds_like_composer_edit'>\n          <strong texttype='sounds_like_composer_edit'>Sounds Like Composer: </strong> {modal.selectedCue.sounds_like_composer_edit}\n        </div>\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    categories: state.categories,\n    composersBI: state.composersBI,\n    cues: state.cues,\n    instrumentsBI: state.instrumentsBI,\n    keywordsBI: state.keywordsBI,\n    modal: state.modal,\n    ratings: state.ratings,\n    styles: state.styles,\n    tempos: state.tempos\n  }\n}\n\nconst mapDispatchToProps = {\n  showCategories,\n  showInstruments,\n  showKeywords,\n  showRatings,\n  showStyles,\n  showTempos,\n  showTextBox\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftColumn);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport TextBox from './TextBox';\nimport { clearSearch, handleSearchFilter, updateData } from '../../actions/modalActions';\nimport { selectCategory } from '../../actions/BackgroundInstrumentalsActions/categoriesActions';\nimport { selectInstruments } from '../../actions/BackgroundInstrumentalsActions/instrumentsBIActions';\nimport { selectKeywords } from '../../actions/BackgroundInstrumentalsActions/keywordsActions';\nimport { selectRating } from '../../actions/BackgroundInstrumentalsActions/ratingsActions';\nimport { selectStyle } from '../../actions/BackgroundInstrumentalsActions/stylesActions';\nimport { selectTempos } from '../../actions/BackgroundInstrumentalsActions/temposActions';\nimport { updateCues } from '../../actions/BackgroundInstrumentalsActions/cuesActions';\n\n// this is a stateless functional component\nclass RightColumn extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  // **********************************************************************************************************\n  // CATEGORIES FUNCTIONS\n  // **********************************************************************************************************\n\n  renderCategories = () => {\n    let allCategories = this.props.categories;\n    let selectedCue = this.props.modal.selectedCue;\n    // if there is a category set for the cue...\n    if (selectedCue.cat_id !== 19) {\n      allCategories.forEach(category => {\n          category.cat_id === selectedCue.cat_id\n            ? category.selected = true\n            : null\n      })\n      // checks to see if the category is selected or not\n      // and we return the div with className with corresponding SASS.\n      return allCategories.map(obj =>  obj.selected\n        ? <div key={`${obj.cat_name} - ${obj.cat_id}`}\n          className='selected'\n          id={obj.cat_id}\n          onClick={() => this.setCategory(obj)}>\n          {obj.cat_name}\n        </div>\n        : <div key={`${obj.cat_name} - ${obj.cat_id}`}\n          className='select'\n          id={obj.cat_id}\n          onClick={() => this.setCategory(obj)}>\n          {obj.cat_name}\n        </div>)\n    } else {\n      // if there is no category just render the normal divs\n      return allCategories.map(obj =>\n        <div\n          key={`${obj.cat_name} - ${obj.cat_id}`}\n          className='select'\n          id={obj.cat_id}\n          onClick={() => this.setCategory(obj)}>\n          {obj.cat_name}\n        </div>)\n      }\n  }\n\n  setCategory = (newCategory) => {\n    let allCategories = this.props.categories;\n    let updatedCue = this.props.modal.selectedCue;\n    // if the selected cue has a tempo\n    if (updatedCue.cat_id !== 19){\n      if(updatedCue.cat_id !== newCategory.cat_id){\n        updatedCue.cat_id = newCategory.cat_id;\n        // change the selected value of the tempo that was selected to true\n        for (let cat in allCategories) {\n          if (allCategories[cat].cat_id === newCategory.cat_id) {\n            allCategories[cat].selected = true;\n          } else {\n            // this makes sure only one tempo can be selected at a time\n            allCategories[cat].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectCategory(allCategories)\n        this.props.updateCues(updatedCue, this.props.cues)\n      } else {\n        // if newCategory is already the cat_id, then they are clicking it again to remove it\n        updatedCue.cat_id = 19;\n        for (let x in allCategories) {\n          if (allCategories[x].cat_id === newCategory.cat_id) {\n            allCategories[x].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectCategory(allCategories)\n        this.props.updateCues(updatedCue, this.props.cues)\n      }\n    // else if the selected cue has no tempo, add it\n    } else {\n      updatedCue.cat_id = newCategory.cat_id;\n      for (let x in allCategories) {\n        if (allCategories[x].cat_id === newCategory.cat_id) {\n          allCategories[x].selected = true;\n        }\n      }\n      this.props.updateData(this.props.modal, updatedCue)\n      this.props.selectCategory(allCategories)\n      this.props.updateCues(updatedCue, this.props.cues)\n    }\n  }\n\n  // **********************************************************************************************************\n  // STYLES FUNCTIONS\n  // **********************************************************************************************************\n\n  renderStyles = () => {\n    let allStyles = this.props.styles.filter(style =>\n      // this function checks to see if the searchFilterQuery appears at all\n      // in any of the style names, and returns a filtered array\n        style.style_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n    let selectedCue = this.props.modal.selectedCue;\n    // if there is a category set for the cue...\n    if (selectedCue.style_id !== 147) {\n      allStyles.forEach(style => {\n          style.style_id === selectedCue.style_id\n            ? style.selected = true\n            : null\n      })\n      // checks to see if the category is selected or not\n      // and we return the div with className with corresponding SASS.\n      return allStyles.map(obj =>  obj.selected\n        ? <div key={`${obj.style_name} - ${obj.style_id}`}\n          className='selected'\n          id={obj.style_id}\n          onClick={() => this.setStyle(obj)}>\n          {obj.style_name}\n        </div>\n        : <div key={`${obj.style_name} - ${obj.style_id}`}\n          className='select'\n          id={obj.style_id}\n          onClick={() => this.setStyle(obj)}>\n          {obj.style_name}\n        </div>)\n    } else {\n      // if there is no category just render the normal divs\n      let allStyles = this.props.styles.filter(style =>\n          style.style_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n        return allStyles.map(obj =>  obj.selected\n          ? <div key={`${obj.style_name} - ${obj.style_id}`}\n            className='selected'\n            id={obj.style_id}\n            onClick={() => this.setStyle(obj)}>\n            {obj.style_name}\n          </div>\n          : <div key={`${obj.style_name} - ${obj.style_id}`}\n            className='select'\n            id={obj.style_id}\n            onClick={() => this.setStyle(obj)}>\n            {obj.style_name}\n          </div>)\n    }\n  }\n\n  setStyle = (newStyle) => {\n    let allStyles = this.props.styles;\n    let updatedCue = this.props.modal.selectedCue;\n    // if the selected cue has a tempo\n    if (updatedCue.style_id !== 147){\n      if(updatedCue.style_id !== newStyle.style_id){\n        updatedCue.style_id = newStyle.style_id;\n        // change the selected value of the tempo that was selected to true\n        for (let cat in allStyles) {\n          if (allStyles[cat].style_id === newStyle.style_id) {\n            allStyles[cat].selected = true;\n          } else {\n            // this makes sure only one tempo can be selected at a time\n            allStyles[cat].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectStyle(allStyles)\n        this.props.updateCues(updatedCue, this.props.cues)\n      } else {\n        // if newStyle is already the style_id, then they are clicking it again to remove it\n        updatedCue.style_id = 147;\n        for (let x in allStyles) {\n          if (allStyles[x].style_id === newStyle.style_id) {\n            allStyles[x].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectStyle(allStyles)\n        this.props.updateCues(updatedCue, this.props.cues)\n      }\n    // else if the selected cue has no tempo, add it\n    } else {\n      updatedCue.style_id = newStyle.style_id;\n      for (let x in allStyles) {\n        if (allStyles[x].style_id === newStyle.style_id) {\n          allStyles[x].selected = true;\n        }\n      }\n      this.props.updateData(this.props.modal, updatedCue)\n      this.props.selectStyle(allStyles)\n      this.props.updateCues(updatedCue, this.props.cues)\n    }\n  }\n\n  // **********************************************************************************************************\n  // INSTRUMENTS FUNCTIONS\n  // **********************************************************************************************************\n\n  renderInstruments = () => {\n    // if there is a search happening and instruments in the selectedCue\n    if (this.props.modal.searchFilter !== '' && this.props.modal.selectedCue.cue_instrus) {\n      let allInstruments = this.props.instrumentsBI.filter(instrument =>\n        // this function checks to see if the searchFilterQuery appears at all\n        // in any of the instrument names, and returns a filtered array\n          instrument.instru_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n      // grab all the insturments from the selectedCue\n      let instrumentsArray = this.props.modal.selectedCue.cue_instrus.split(',');\n      // change the selected boolean to true for those insturments\n      instrumentsArray.forEach(instrument => {\n        for (let i in allInstruments) {\n          allInstruments[i].instru_name === instrument\n            ? allInstruments[i].selected = true\n            : null\n        }\n      })\n\n      return allInstruments.map(\n        obj => obj.selected\n        ? <div key = {`${obj.instru_id}`}\n          className = 'selected'\n          id = {obj.instru_id}\n          onClick = {() => this.setInstruments(obj.instru_name)} > {obj.instru_name}\n        </div>\n        :\n        <div key = {`${obj.instru_id}`}\n          className = 'select'\n          id = {obj.instru_id}\n          onClick = {() => this.setInstruments(obj.instru_name)}>\n          {obj.instru_name}</div >)\n    } else if (this.props.modal.searchFilter === '' && this.props.modal.selectedCue.cue_instrus){\n      // checks to see if the instrument in our query filtered array is selected or not\n      // and we return the div with className with corresponding css styling.\n      let allInstruments = this.props.instrumentsBI.filter(instrument =>\n          instrument.instru_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n      // grab all the insturments from the selectedCue\n      let instrumentsArray = this.props.modal.selectedCue.cue_instrus.split(',');\n      // change the selected boolean to true for those insturments\n      instrumentsArray.forEach(instrument => {\n        for (let i in allInstruments) {\n          allInstruments[i].instru_name === instrument\n            ? allInstruments[i].selected = true\n            : null\n        }\n      })\n         return allInstruments.map(\n           obj => obj.selected\n           ? <div key = {`${obj.instru_id}`}\n             className = 'selected'\n             id = {obj.instru_id}\n             onClick = {() => this.setInstruments(obj.instru_name)} > {obj.instru_name}\n           </div>\n           :\n           <div key = {`${obj.instru_id}`}\n             className = 'select'\n             id = {obj.instru_id}\n             onClick = {() => this.setInstruments(obj.instru_name)}>\n             {obj.instru_name}</div >)\n    } else {\n      //  if the search query is empty and there are no instruments in the selectedCue\n      let allInstruments = this.props.instrumentsBI.filter(instrument =>\n         instrument.instru_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n         return allInstruments.map(\n           obj => obj.selected\n           ? <div key = {`${obj.instru_id}`}\n             className = 'selected'\n             id = {obj.instru_id}\n             onClick = {() => this.setInstruments(obj.instru_name)} > {obj.instru_name}\n           </div>\n           :\n           <div key = {`${obj.instru_id}`}\n             className = 'select'\n             id = {obj.instru_id}\n             onClick = {() => this.setInstruments(obj.instru_name)}>\n             {obj.instru_name}</div >)\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------------------------\n\n  setInstruments = (instrument) => {\n    let allInstruments = this.props.instruments;\n    let newInstrument = instrument;\n    let updatedCue = this.props.modal.selectedCue;\n    if (updatedCue.cue_instrus !== null && updatedCue.cue_instrus !== '') {\n      let selectedInstruments = updatedCue.cue_instrus.split(',').map(inst => inst.trim())\n      if (selectedInstruments.indexOf(newInstrument) === -1) {\n        updatedCue.cue_instrus = `${selectedInstruments},${newInstrument}`;\n        for (let inst in allInstruments) {\n          if (allInstruments[inst].instru_name === newInstrument) {\n            allInstruments[inst].selected = true;\n          }\n        }\n        this.props.selectInstruments(allInstruments)\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.updateCues(updatedCue, this.props.cues)\n      } else {\n        let selectedIndex = selectedInstruments.indexOf(newInstrument);\n        let i = selectedIndex;\n        selectedInstruments.splice(i, 1)\n        updatedCue.cue_instrus = selectedInstruments.join(',');\n        for (let inst in allInstruments) {\n          if (allInstruments[inst].instru_name === newInstrument) {\n            allInstruments[inst].selected = false;\n          }\n        }\n        this.props.selectInstruments(allInstruments)\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.updateCues(updatedCue, this.props.cues)\n      }\n    } else {\n      updatedCue.cue_instrus = `${newInstrument}`;\n      for (let inst in allInstruments) {\n        if (allInstruments[inst].instru_name === newInstrument) {\n          allInstruments[inst].selected = true;\n        }\n      }\n      this.props.selectInstruments(allInstruments)\n      this.props.updateData(this.props.modal, updatedCue)\n      this.props.updateCues(updatedCue, this.props.cues)\n    }\n  }\n\n  // **********************************************************************************************************\n  // KEYWORDS FUNCTIONS\n  // **********************************************************************************************************\n\n  renderKeywords = () => {\n    // if there is a description for the cue and a search Filter\n    if (this.props.modal.searchFilter !=='' && this.props.modal.selectedCue.cue_desc) {\n      let allKeywords = this.props.keywordsBI.filter(keyword =>\n        // filter the array by searchFilterQuery\n      keyword.key_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n      let selectedCueKeywords = this.props.modal.selectedCue.cue_desc.split(',');\n      // change the selected boolean to true for those keywords\n      selectedCueKeywords.forEach(keyword => {\n        for (let i in allKeywords) {\n          allKeywords[i].key_name === keyword\n            ? allKeywords[i].selected = true\n            : null\n        }\n      })\n      // checks to see if the keyword is selected or not and we return the div with className with corresponding SASS.\n      return allKeywords.map(obj => obj.selected\n        ? <div key = {`${obj.key_id}`}\n          className = 'selected'\n          id = {obj.key_id}\n          onClick = {() => this.setKeyword(obj.key_name)}>\n          {obj.key_name}</div>\n        : <div key = {`${obj.key_id}`}\n          className = 'select'\n          id = {obj.key_id}\n          onClick = {() => this.setKeyword(obj.key_name)}>\n          {obj.key_name}\n        </div >)\n    } else if (this.props.modal.searchFilter === '' && this.props.modal.selectedCue.cue_desc){\n      let allKeywords = this.props.keywordsBI.filter(keyword =>\n        // filter the array by searchFilterQuery\n      keyword.key_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n      let selectedCueKeywords = this.props.modal.selectedCue.cue_desc.split(',');\n      // change the selected boolean to true for those keywords\n      selectedCueKeywords.forEach(keyword => {\n        for (let i in allKeywords) {\n          allKeywords[i].key_name === keyword\n            ? allKeywords[i].selected = true\n            : null\n        }\n      })\n      // checks to see if the keyword is selected or not and we return the div with className with corresponding SASS.\n      return allKeywords.map(obj => obj.selected\n        ? <div key = {`${obj.key_id}`}\n          className = 'selected'\n          id = {obj.key_id}\n          onClick = {() => this.setKeyword(obj.key_name)}>\n          {obj.key_name}</div>\n        : <div key = {`${obj.key_id}`}\n          className = 'select'\n          id = {obj.key_id}\n          onClick = {() => this.setKeyword(obj.key_name)}>\n          {obj.key_name}\n        </div >)\n    } {\n      let allKeywords = this.props.keywordsBI.filter(keyword =>\n        keyword.key_name.toLowerCase().indexOf(this.props.modal.searchFilter.toLowerCase()) !== -1)\n      // if there is no description just render the normal divs\n      return allKeywords.map(obj => obj.selected\n        ? <div key = {`${obj.key_id}`}\n          className = 'selected'\n          id = {obj.key_id}\n          onClick = {() => this.setKeyword(obj.key_name)}>\n          {obj.key_name}</div>\n        : <div key = {`${obj.key_id}`}\n          className = 'select'\n          id = {obj.key_id}\n          onClick = {() => this.setKeyword(obj.key_name)}>\n          {obj.key_name}\n        </div >)\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------------------------\n\n  setKeyword = (keyword) => {\n    let allKeywords = this.props.keywordsBI;\n    let newKeyword = keyword;\n    let updatedCue = this.props.modal.selectedCue;\n    // if the selected cue has keywords\n    if (updatedCue.cue_desc !== null && updatedCue.cue_desc !== '') {\n      // turn the cue_desc into an array\n      let selectedCueKeywords = updatedCue.cue_desc.split(',').map(inst => inst.trim())\n      // check to see if the newKeyword already exsits in the cue_description\n      if (selectedCueKeywords.indexOf(newKeyword) === -1) {\n        // if it doesn't, we will add it\n        updatedCue.cue_desc = `${selectedCueKeywords},${newKeyword}`;\n        for (let keyword in allKeywords) {\n          if (allKeywords[keyword].key_name === newKeyword) {\n            allKeywords[keyword].selected = true;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue);\n        this.props.selectKeywords(allKeywords);\n        this.props.updateCues(updatedCue, this.props.cues)\n      } else {\n        // if newKeyword is already in the cue_desc, then they are clicking it again to remove it\n        selectedCueKeywords.splice(selectedCueKeywords.indexOf(newKeyword), 1)\n        updatedCue.cue_desc = selectedCueKeywords.join(',');\n        for (let keyword in allKeywords) {\n          if (allKeywords[keyword].key_name === newKeyword) {\n            allKeywords[keyword].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue);\n        this.props.selectKeywords(allKeywords);\n        this.props.updateCues(updatedCue, this.props.cues)\n      }\n      // else if the selected cue has no keywords, add it to the description\n    } else {\n      updatedCue.cue_desc = `${newKeyword}`;\n      for (let keyword in allKeywords) {\n        if (allKeywords[keyword].key_name === newKeyword) {\n          allKeywords[keyword].selected = true;\n        }\n      }\n      this.props.updateData(this.props.modal, updatedCue);\n      this.props.selectKeywords(allKeywords);\n      this.props.updateCues(updatedCue, this.props.cues)\n    }\n  }\n\n  // **********************************************************************************************************\n  // TEMPOS FUNCTIONS\n  // **********************************************************************************************************\n\n  renderTempos = () => {\n    let allTempos = this.props.tempos;\n    let selectedCue = this.props.modal.selectedCue;\n    // if there is a tempo set for the cue...\n    if (selectedCue.tempo_id !== 28) {\n      allTempos.forEach(tempo => {\n          tempo.tempo_id === selectedCue.tempo_id\n            ? tempo.selected = true\n            : null\n      })\n      // checks to see if the tempo is selected or not\n      // and we return the div with className with corresponding SASS.\n      return allTempos.map(obj =>  obj.selected\n        ? <div key={`${obj.tempo_id}`}\n          className='selected'\n          id={obj.tempo_id}\n          onClick={() => this.setTempo(obj)}>\n          {obj.tempo_name}\n        </div>\n        : <div key={`${obj.tempo_id}`}\n          className='select'\n          id={obj.tempo_id}\n          onClick={() => this.setTempo(obj)}>\n          {obj.tempo_name}\n        </div>)\n    } else {\n      // if there is no tempo just render the normal divs\n      return allTempos.map(obj =>\n        <div\n          key={`${obj.tempo_id}`}\n          className='select'\n          id={obj.tempo_id}\n          onClick={() => this.setTempo(obj)}>\n          {obj.tempo_name}\n        </div>)\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------------------------\n\n  setTempo = (newTempo) => {\n    let allTempos = this.props.tempos;\n    let updatedCue = this.props.modal.selectedCue;\n    // if the selected cue has a tempo\n    if (updatedCue.tempo_id !== 28){\n      if(updatedCue.tempo_id !== newTempo.tempo_id){\n        updatedCue.tempo_id = newTempo.tempo_id;\n        // change the selected value of the tempo that was selected to true\n        for (let tempo in allTempos) {\n          if (allTempos[tempo].tempo_id === newTempo.tempo_id) {\n            allTempos[tempo].selected = true;\n          } else {\n            // this makes sure only one tempo can be selected at a time\n            allTempos[tempo].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectTempos(allTempos)\n        this.props.updateCues(updatedCue, this.props.cues)\n      } else {\n        // if newTempo is already the tempo_id, then they are clicking it again to remove it\n        updatedCue.tempo_id = 28;\n        for (let x in allTempos) {\n          if (allTempos[x].tempo_id === newTempo.tempo_id) {\n            allTempos[x].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectTempos(allTempos)\n        this.props.updateCues(updatedCue, this.props.cues)\n      }\n    // else if the selected cue has no tempo, add it\n    } else {\n      updatedCue.tempo_id = newTempo.tempo_id;\n      for (let x in allTempos) {\n        if (allTempos[x].tempo_id === newTempo.tempo_id) {\n          allTempos[x].selected = true;\n        }\n      }\n      this.props.updateData(this.props.modal, updatedCue)\n      this.props.selectTempos(allTempos)\n      this.props.updateCues(updatedCue, this.props.cues)\n    }\n  }\n\n  // **********************************************************************************************************\n  // RATINGS FUNCTIONS\n  // **********************************************************************************************************\n\n  renderRatings = () => {\n    let allRatings = this.props.ratings;\n    let selectedCue = this.props.modal.selectedCue;\n\n    if(selectedCue.cue_rating !== null){\n      allRatings.forEach(rating => {\n        rating.value === selectedCue.cue_rating\n          ? rating.selected = true\n          : null\n      })\n      return allRatings.map(rating => rating.selected\n        ?  <div\n            id={rating.value}\n            key={rating.value}\n            className='selected'\n            onClick={() => this.setRating(rating)}>{rating.value}\n          </div>\n        : <div\n            id={rating.value}\n            key={rating.value}\n            className='select'\n            onClick={() => this.setRating(rating)}>{rating.value}\n          </div>)\n    } else {\n      return allRatings.map(rating =>\n        <div\n          id={rating.value}\n          key={rating.value}\n          className='select'\n          onClick={() => this.setRating(rating)}> {rating.value}\n          </div >\n      )\n    }\n  }\n\n// -------------------------------------------------------------------------------------------------------------\n\n  setRating = (newRating) => {\n    let allRatings = this.props.ratings;\n    let updatedCue = this.props.modal.selectedCue;\n    if(updatedCue.cue_rating !== 0){\n      if(updatedCue.cue_rating !== newRating.value){\n        updatedCue.cue_rating = newRating.value;\n        for(let x in allRatings){\n          if (allRatings[x].value === newRating.value){\n            allRatings[x].selected = true;\n          } else {\n            allRatings[x].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectRating(allRatings)\n        this.props.updateCues(updatedCue, this.props.cues)\n      } else {\n        updatedCue.cue_rating === 0;\n        for(let x in allRatings){\n          if (allRatings[x].value === newRating.value){\n            allRatings[x].selected = false;\n          }\n        }\n        this.props.updateData(this.props.modal, updatedCue)\n        this.props.selectRating(allRatings)\n        this.props.updateCues(updatedCue, this.props.cues)\n      }\n    } else {\n      updatedCue.cue_rating = newRating.value;\n      for(let x in allRatings){\n        if (allRatings[x].value === newRating.value){\n          allRatings[x].selected = true;\n        }\n      }\n      this.props.updateData(this.props.modal, updatedCue)\n      this.props.selectRating(allRatings)\n      this.props.updateCues(updatedCue, this.props.cues)\n    }\n  }\n\n  // **********************************************************************************************************\n  // TEXTBOX FUNCTIONS\n  // **********************************************************************************************************\n\n  renderTextBox = (textType) => {\n    switch (textType) {\n      case 'sounds_like_band_edit':\n        return <div><br/><strong> Sounds like Bands: </strong><TextBox handleChange={this.handleChange} value={this.props.modal.selectedCue.sounds_like_band_edit || ''} textType='sounds_like_band_edit'/></div>;\n        break;\n      case 'sounds_like_film_edit':\n        return <div><br/><strong> Sounds like Films: </strong><TextBox handleChange={this.handleChange} value={this.props.modal.selectedCue.sounds_like_film_edit || ''} textType='sounds_like_film_edit'/></div>;\n        break;\n      case 'sounds_like_composer_edit':\n        return <div><br/><strong> Sounds like Composers: </strong><TextBox handleChange={this.handleChange} value={this.props.modal.selectedCue.sounds_like_composer_edit || ''}textType='sounds_like_composer_edit'/></div>;\n        break;\n      }\n  }\n\n  handleChange = (event) => {\n    let updatedCue = this.props.modal.selectedCue;\n    switch (event.target.getAttribute('texttype')) {\n      case 'sounds_like_band_edit':\n        updatedCue.sounds_like_band_edit = event.target.value;\n        this.props.updateData(this.props.modal, updatedCue)\n        break;\n      case 'sounds_like_film_edit':\n        updatedCue.sounds_like_film_edit = event.target.value;\n        this.props.updateData(this.props.modal, updatedCue)\n        break;\n      case 'sounds_like_composer_edit':\n        updatedCue.sounds_like_composer_edit = event.target.value;\n        this.props.updateData(this.props.modal, updatedCue)\n        break;\n    }\n  }\n\n  handleSearchFilter = (query) => {\n    this.props.handleSearchFilter(query.trim(), this.props.modal)\n  }\n\n  clearSearch = () => {\n    this.props.clearSearch(this.props.modal)\n    document.getElementById('search-filter').value = '';\n  }\n\n  render(){\n    let modal = this.props.modal;\n    let searchBar = modal.showInstruments || modal.showKeywords || modal.showStyles\n      ?   <div>\n        <br/>\n        <input\n          id='search-filter'\n          type=\"text\"\n          name=\"search\"\n          value={this.props.searchFilter}\n          onChange={ e => this.handleSearchFilter(e.target.value)}\n            /><button onClick={this.clearSearch}>Clear</button>\n          </div>\n      :   <br/>;\n\n    return(\n      <div className='modal-right-column'>\n        {searchBar}\n        {\n            modal.showCategories\n              ? <div>\n                  <strong>Categories:</strong>\n                  {this.renderCategories()}\n                </div>\n              : null\n        }\n        {\n            modal.showStyles\n              ? <div>\n                <strong>Styles:</strong>\n                {this.renderStyles()}\n                </div>\n              : null\n        }\n        {\n            modal.showInstruments\n              ? <div>\n                <strong>Instruments:</strong>\n                {this.renderInstruments()}\n              </div>\n              : null\n        }\n        {\n            modal.showKeywords\n              ? <div>\n                <strong>Keywords:</strong>\n                {this.renderKeywords()}\n              </div>\n              : null\n        }\n        {\n            modal.showTempos\n              ? <div>\n                  <strong>Tempos:</strong>\n                  {this.renderTempos()}\n                </div>\n              : null\n        }\n        {\n            modal.showRating\n              ? <div>\n                <strong>Rating:</strong>\n                {this.renderRatings()}\n              </div>\n              : null\n        }\n        {\n            modal.showText\n              ? this.renderTextBox(event.target.getAttribute('texttype'))\n              : null\n        }\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    categories: state.categories,\n    composersBI: state.composersBI,\n    cues: state.cues,\n    instrumentsBI: state.instrumentsBI,\n    keywordsBI: state.keywordsBI,\n    modal: state.modal,\n    ratings: state.ratings,\n    searchFilter: state.searchFilter,\n    styles: state.styles,\n    tempos: state.tempos\n  }\n}\n\nconst mapDispatchToProps = {\n  clearSearch,\n  handleSearchFilter,\n  selectCategory,\n  selectInstruments,\n  selectKeywords,\n  selectRating,\n  selectStyle,\n  selectTempos,\n  updateCues,\n  updateData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RightColumn);\n","import React from 'react';\n\n// this is a stateless functional component\nconst TextBox = (props) => {\n  // console.log(5, props)\n  return(\n  <div>\n    <textarea className='text-area' value={props.value} texttype={props.textType} onChange={props.handleChange}>\n      </textarea >\n  </div>\n)};\n\nexport default TextBox;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAvCA;AAEA;AACA;;;AAqCA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAKA;;;;AAvEA;AACA;AAyEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AASA;AACA;AACA;AAXA;AAiBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAtBA;AA4BA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjCA;AAuCA;AACA;AAAA;AACA;AACA;AACA;AACA;AA5CA;AAkDA;AACA;AACA;AApDA;AA0DA;AACA;AACA;AA5DA;AAkEA;AACA;AACA;AApEA;AAEA;AAGA;AACA;AACA;AACA;;;AA6DA;AACA;AAEA;AACA;AAAA;AAeA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;;;;AA3IA;AACA;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAaA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AADA;AAQA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA1FA;AAgGA;AAAA;AAEA;AACA;AAHA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAaA;AACA;AACA;AA9IA;AAgJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA3LA;AAiMA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAYA;AACA;AACA;AA9QA;AAkRA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA3TA;AAiUA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AANA;AAYA;AACA;AAAA;AAEA;AAFA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AANA;AAYA;AACA;AADA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AANA;AAYA;AACA;AACA;AAxYA;AA4YA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAzbA;AA+bA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAPA;AAaA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AADA;AAQA;AACA;AACA;AAneA;AAueA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAlhBA;AAwhBA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAPA;AAaA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AADA;AAQA;AACA;AACA;AAzjBA;AA6jBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAnmBA;AAymBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAWA;AACA;AArnBA;AAunBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAZA;AAcA;AACA;AAvoBA;AAyoBA;AACA;AACA;AA3oBA;AA6oBA;AACA;AAAA;AACA;AACA;AAhpBA;AAEA;AAGA;AACA;AACA;AACA;;;AAyoBA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAMA;AAAA;AAIA;AACA;AAAA;AAyDA;;;;AA3tBA;AACA;AA2tBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;;;;;;;;ACvwBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}